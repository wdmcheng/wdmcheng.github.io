<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Curator-管理你的Elasticsearch索引]]></title>
    <url>%2FCurator-%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84Elasticsearch%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[准备工作我这里以 CentOS 7 为例来进行说明。 安装官方推荐最简单的安装方式就是使用 pip，没错，这货是 python 写的。 最简化安装的 CentOS，虽然自带了 python，但是没有相关头文件，无法安装 pip，干脆编译安装 python3。既然要编译，先装个开发工具包再说 1yum -y groupinstall 'Development Tools' 编译 python3，一定要注意 OpenSSL 支持是不是启用了，否则后面没办法下载各种包了，还需要这些依赖，不安装会报错的（都是试错过后的总结，都是眼泪😢） 1yum -y install openssl openssl-devel zlib zlib-devel libffi-devel 下载 python3 的源码包，然后解压编译并执行 configure 123456# 下载解压wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xztar -Jxf Python-3.7.3.tar.xzcd Python-3.7.3/# 执行配置./configure 执行完 configure 后，注意看 OpenSSL 支持是不是启用了。如图是成功启用的。 后面编译安装 12makemake install 这个时候没有 pip 命令，只有 pip3。不用别名处理了，顺手更新一下 pip 版本，也会自动安装 pip 这个命令 1pip3 install --upgrade pip 进入正题，安装 curator 1pip3 install elasticsearch-curator 配置 执行 curator 命令时，默认读取的配置文件在 ~/.curator/curator.yml。创建配置文件，内容如下 123456789101112131415161718192021222324252627---# Remember, leave a key empty if there is no value. None will be a string,# not a Python "NoneType"client: # ES 节点列表 hosts: - 10.0.79.14 - 10.0.79.22 - 10.0.79.23 - 10.0.79.24 port: 9200 url_prefix: use_ssl: False certificate: client_cert: client_key: ssl_no_validate: False http_auth: username:password timeout: 30 master_only: Falselogging: loglevel: INFO # logfile 文件路径，一定要保证文件的父级文件夹存在 logfile: /data/es-curator-log/es-curator.log logformat: default blacklist: ['elasticsearch', 'urllib3'] 上面的 http_auth 部分，是用户名和密码，用 : 分隔。更多配置文件写法，参考 官方文档 创建任务文件，这里提供一个参考，内容如下。详细信息参考官方文档 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677---# Remember, leave a key empty if there is no value. None will be a string,# not a Python "NoneType"## Also remember that all examples have 'disable_action' set to True. If you# want to use this action as a template, be sure to set this to False after# copying it.actions: 1: action: delete_indices description: &gt;- Delete indices older than 31 days (based on index name), for -pro- indices. 删除31天之前的 -pro- 索引 options: ignore_empty_list: True timeout_override: 300 continue_if_exception: True disable_action: False filters: - filtertype: pattern kind: regex value: '.*-pro-.*' exclude: - filtertype: age source: name direction: older timestring: '%Y.%m.%d' unit: days unit_count: 31 exclude: 2: action: delete_indices description: &gt;- Delete indices older than 7 days (based on index name), except -pro- indices. 删除7天之前的非 -pro- 索引 options: ignore_empty_list: True timeout_override: 300 continue_if_exception: True disable_action: False filters: - filtertype: pattern kind: regex value: '.*-pro-.*' exclude: True - filtertype: age source: name direction: older timestring: '%Y.%m.%d' unit: days unit_count: 7 exclude: 3: action: delete_indices description: &gt;- Delete indices older than 3 days (based on index name), for system indices. 删除3天之前的系统索引 options: ignore_empty_list: True timeout_override: 300 continue_if_exception: True disable_action: False filters: - filtertype: pattern kind: regex value: '^\..*-.*' exclude: - filtertype: age source: name direction: older timestring: '%Y.%m.%d' unit: days unit_count: 3 exclude: 现在可以使用 --dry-run 参数试运行测试一下（这个参数的作用就是不会真正的去执行，只是模拟）。--config ~/.curator/curator.yml 可省略 1curator --config ~/.curator/curator.yml --dry-run ~/delete_indecies.yml 配置定时任务先说一下用法，后面再列几篇文章供参考 执行 crontab -e，会自动打开 vim 编辑器 我这里是每隔6个小时执行一次，因此添加一行 0 0,6,12,18 * * * /usr/local/bin/curator ~/delete_indecies.yml 保存后大功告成 参考资料 Curator 文档 crontab 参数解释 Linux 定时任务]]></content>
      <tags>
        <tag>elastic</tag>
        <tag>elasticsearch</tag>
        <tag>es</tag>
        <tag>curator</tag>
        <tag>python</tag>
        <tag>python3</tag>
        <tag>pip</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS文件系统区分大小写的环境配置]]></title>
    <url>%2FmacOS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[起因macOS 的文件系统不区分大小写，但在开发编码的过程中，可能会下载到需要区分大小写的文件——Git 还可以通过配置控制一下，SVN 中出现这种问题的概率就不小了——因此想要找到一个解决办法。 如果将文件系统直接改成区分大小写的，又会有一些软件无法正常使用（譬如 Adobe 家的），所以不想自找麻烦。 如果对磁盘进行分区，分出一块空间专门用来开发，格式化为区分大小写的。这就会造成一定程度的磁盘空间浪费（不继续 Windows 的使用习惯了，就是不想分区），总是会很心疼的，毕竟 mac 的磁盘空间很贵。 方案后来了解到 mac 的稀疏磁盘映像(sparseimage)比较不错 对映像文件的操作与 dmg 格式相同 使用多少空间，其真实占用空间就是那么大，不会造成空间浪费。假设新建一个稀疏磁盘映像，大小为50GB，里面存了5GB的代码，那么这个映像文件实际占用5GB存储空间 映像声明的空间不够了，还可以随时扩容。当然前提是你的物理磁盘装得下 性能几乎无损 需要备份、迁移代码库？零散文件的读写哪有单个文件快呀，直接复制磁盘映像，你的代码库就备份了 嗯，最后决定建一个稀疏磁盘映像，格式化成区分大小写的分区格式，来保存我的代码库 实施建立磁盘映像 打开磁盘工具，新建空白映像（图1） 其中 存储为 和 位置 随意，我这里是 ~/DevCaseSensitive.sparsebundle 下面的 名称 定义的是分区名称，也就是磁盘的挂载点了 大小根据自身情况来填 格式我选的是 APFS（区分大小写） 分区就单个分区就行，选择 GUID 分区图 映像格式选择 稀疏捆绑磁盘映像 然后就可以把代码都写入这个分区了，我这里的挂载点是 /Volumes/DevCaseSensitive 如果你有很多项目了，又懒得一个一个去处理，用软连接吧（先学会用，注意数据安全） 如果映像空间不够了，可以扩容的 关闭所有使用该分区的程序 卸载该磁盘映像 使用 hdiutil resize -size 50g ~/DevCaseSensitive.sparseimage 来修改大小 hdiutil attach ~/DevCaseSensitive.sparseimage 重新挂载磁盘映像 使用命令行或者磁盘工具调整分区大小 开机自动挂载我在磁盘映像里还放了 IDE 工具（JetBrains 的 IntelliJ IDEA），而 JetBrains Toolbox 会开机自启。又由于 macOS 登录后的各程序启动都是并行的，没有先后顺序，因此不能直接将磁盘映像添加到登录项LaunchDaemons 是在系统启动后就会执行，优先于登录项，因此这里采用这种机制 参考文章 了解LaunchDaemons 利用 Launchd 定制 Mac 启动任务 Mac OS启动服务优化高级篇（launchd tuning） Mac OSX的开机启动配置 Daemons and Agents LaunchAgents 的目录都是登录项，不能用，/System/Library/LaunchDaemons 是系统级的，一般不动，因此目录选择 /Library/LaunchDaemons在 /Library/LaunchDaemons 下新建文件 cn.wdmcheng.sparseimage-loader.plist，内容如下（xxxxx 是用户名） 1234567891011121314151617181920&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;&lt;plist version="1.0"&gt; &lt;dict&gt; &lt;key&gt;Label&lt;/key&gt; &lt;string&gt;cn.wdmcheng.sparseimage-loader&lt;/string&gt; &lt;key&gt;ProgramArguments&lt;/key&gt; &lt;array&gt; &lt;string&gt;hdiutil&lt;/string&gt; &lt;string&gt;attach&lt;/string&gt; &lt;string&gt;/Users/xxxxx/DevCaseSensitive.sparseimage&lt;/string&gt; &lt;/array&gt; &lt;key&gt;RunAtLoad&lt;/key&gt; &lt;true/&gt; &lt;key&gt;StandardErrorPath&lt;/key&gt; &lt;string&gt;/dev/null&lt;/string&gt; &lt;key&gt;StandardOutPath&lt;/key&gt; &lt;string&gt;/dev/null&lt;/string&gt; &lt;/dict&gt;&lt;/plist&gt; 执行命令 launchctl load /Library/LaunchDaemons/cn.wdmcheng.sparseimage-loader.plist 加载配置，重启即可生效 IDE 配置JetBrains 家的 IDE 需要配置一个属性，来指定使用区分大小写的模式在 IDE 的 JVM 参数上，增加 -Didea.case.sensitive.fs=true 即可接下来就可以正常使用啦]]></content>
      <tags>
        <tag>macOS</tag>
        <tag>mac</tag>
        <tag>LaunchDaemons</tag>
        <tag>CaseSensitive</tag>
        <tag>sparseimage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS调整Launchpad图标大小]]></title>
    <url>%2FmacOS%E8%B0%83%E6%95%B4Launchpad%E5%9B%BE%E6%A0%87%E5%A4%A7%E5%B0%8F%2F</url>
    <content type="text"><![CDATA[调整方式首先要打开Shell 调整可以显示多少行12# 最后数字7即为最多显示7行defaults write com.apple.dock springboard-rows -int 7 调整可以显示多少列12# 最后数字8即为最多显示8列defaults write com.apple.dock springboard-columns -int 8 最后重启Dock生效12# 重启Dockkillall Dock 使Launchpad重新排列图标如果你已经装了很多软件，修改之后还要手动调整图标，可以用下面的办法偷懒1234# 重置LaunchPad的图标排列defaults write com.apple.dock ResetLaunchPad -bool TRUE# 重启Dockkillall Dock 恢复默认图标大小12defaults delete com.apple.dock springboard-rowsdefaults delete com.apple.dock springboard-columns]]></content>
      <tags>
        <tag>macOS</tag>
        <tag>mac</tag>
        <tag>LaunchPad</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记录一下本博客搭建过程]]></title>
    <url>%2F%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E6%9C%AC%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言 欢迎在文末留言，共同进步。 本文采用署名-非商业性使用-相同方式共享 4.0 国际(CC BY-NC-SA 4.0) 许可协议，转载请注明出处！ 博客搭建准备环境 关于基础组件的安装，这里不做详细介绍了，可以查看官网 Git Node.js Hexo 在 Shell 中（Windows 下可能需要使用 Git Bash）执行初始化命令： 12hexo init hexo-blogcd hexo-blog 我这里使用的是 yarn 代替 npm，关于 yarn 的安装，参考这里我用的 Hexo 版本是 3.8.0，不需要执行 yarn install 命令了，init 的时候就做完了，因此只需要 cd 到目录下即可 修改站点配置文件 _config.yml： 配置 原值（默认值） 修改值 title Hexo Wdmcheng subtitle Java Coder description 手握日月摘星晨，世间无我这般人……嗯……吹大了 author John Doe 雾都迷城 language zh-CN timezone Asia/Shanghai url http://yoursite.com https://www.wdmcheng.cn permalink :year/:month/:day/:title/ :title new_post_name :title.md :year/:month/:day/:title.md post_asset_folder false true index_generator &gt; per_page 10 20 per_page 10 20 启动服务器就可以预览看到效果：hexo server 默认地址：http://localhost:4000 能正常访问，就说明环境基本搭建成功了，可以进行下一步了，先根据提示按 Ctrl+C 终止服务运行 实施方案这里采用的是遇见西门教程教程的实施方案三，采用 GithubPages + CodingPages 的方式，不过有些变化。我是部署到 GitLabPages 上，然后使用 GitLab 的镜像仓库功能推送到 GitHub 与 Coding至于 Pages 服务的配置及这些镜像配置就不多介绍了 主题关于主题优化，详细的教程还是要参考遇见西门的博客 应用主题 官网的主题页面很坑，有时候各种404，看不见预览，我直接 Github 搜索。Star 数最高的是 NexT 主题，但是旧版的，我这里直接使用新版 根据主题说明，下载安装主题，我直接安装的最新版本 1git clone https://github.com/theme-next/hexo-theme-next themes/next 修改站点配置文件 _config.yml 的 theme 字段，为主题文件夹名称，我这里就是 next，这时候想看到效果需要重启服务了 不需要默认的 landscape 主题了，直接删除，执行命令 rm -rf themes/landscape 主题修改与优化因为主题是克隆的仓库，后续升级版本其实很方便，为了避免升级时候主题配置的处理太麻烦，因此采用数据文件的形式配置： 执行下面命令，创建 source/_data/ 目录，并将默认主题配置文件 themes/next/_config.yml 复制到 source/_data/ 下，命名为 next.yml 12mkdir -p source/_datacp -p themes/next/_config.yml source/_data/next.yml 修改新的主题配置文件 source/_data/next.yml，将 override 修改为 true RSS 支持安装 hexo-generator-feed 插件，由 Hexo 自动生成订阅源并插入链接，不需要其他配置1yarn add -D hexo-generator-feed 修改主题样式 修改主题配置文件 source/_data/next.yml，将 scheme 修改为 Gemini，使用双子座主题样式 配置菜单显示文章数，修改 menu_settings.badges 为 true 配置文章目录自动换行，修改 toc.wrap 为 true 配置侧边栏显示 Back to Top 按钮，并显示阅读百分比，修改 back2top 下 sidebar: true scrollpercent: true 配置 footer，修改 footer 下 icon.name: heart icon.animated: true 主页文章只显示摘要auto_excerpt.enable: true 记录文章阅读位置打开 save_scroll: true 这个开关就可以在 Cookie 中保存文章的阅读位置，下次进入还会滚动到相同地方 字数统计与阅读时长 执行命令 yarn add -D hexo-symbols-count-time 修改站点配置文件 _config.yml，添加下面代码 1234567# 字数统计与阅读时长symbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: true 如果需要显示站点总字数与站点阅读时长 的文字，修改主题配置文件 source/_data/next.yml，将 symbols_count_time.item_text_total 设置为 true 代码片段复制按钮主题配置文件 source/_data/next.yml 中 codeblock.copy_button.enable 设置为 true，codeblock.copy_button.show_result 设置为 true 优化字库访问速度如果需要优化字库访问速度，可以使用国内字体镜像站 fonts.lug.ustc.edu.cn 代替默认的 fonts.googleapis.com，修改 font 下 enable: true host: //fonts.lug.ustc.edu.cn global.family: Monda headings.family: Roboto Slab logo.family: Lobster Two logo.size: 24 codes.family: PT Mono 配置菜单项 menu 下，打开下面几项的注释 about tags categories schedule 执行下面的命令，生成 categories tags about schedule 页面 1234hexo new page categorieshexo new page tagshexo new page abouthexo new page schedule 生成的文件路径如下 source/categories/index.md source/tags/index.md source/about/index.md source/schedule/index.md 编辑 source/categories/index.md 与 source/tags/index.md 文件，在 date 下面添加一行，分别为 type: categories type: tags，然后再各添加一行 comments: false 禁止评论。 另外两个文件自己随意修改 编辑 scaffolds/post.md 模板文件，在 title 下新添一行 description:，在 tags 下新添一行 categories:，这样以后创建的文章都会自动添加这两个属性 还可添加日程表，使用 Google Calendar，需要梯子。详细配置参考这里，注意主题配置文件中的 calendar.calendar_id 不一定要填写 Google 账号对应的 E-Mail，只需要填写一个日历 ID，一定要是公开日历，否则会报 404 添加创作共用协议我这里使用的是 by-nc-sa，因此配置 creative_commons 项 sidebar: true post: true language: deed.zh 文章开始统一添加前言这里我写了个前言，添加一下授权协议说明，在每篇博文都默认添加，也可以手动关闭 创建文件 themes/next/layout/_custom/custom-post-preface.swig，并输入如下内容，或者自行修改 12345678&lt;h2 id="前言"&gt;&lt;a href="#前言" class="headerlink" title="前言"&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ol&gt; &lt;li&gt;欢迎在文末留言，共同进步。&lt;/li&gt; &lt;li&gt; 本文采用&lt;span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo" title="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"&gt;署名 - 非商业性使用 - 相同方式共享 4.0 国际&lt;i class="fa fa-external-link"&gt;&lt;/i&gt;&lt;/span&gt; (&lt;span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC8=" title="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;CC BY-NC-SA 4.0&lt;i class="fa fa-external-link"&gt;&lt;/i&gt;&lt;/span&gt;) 许可协议，转载请注明出处！ &lt;/li&gt;&lt;/ol&gt; 编辑 scaffolds/post.md 模板文件，在 categories 下新添一行 include_preface: true，做为显示前言的开关，这样以后创建的文章都会自动添加，并且是打开状态，具体文章的标记改为 false，则那篇文章就不会显示前言 编辑 themes/next/layout/_macro/post.swig 文件，在下面所示的区域 123&#123;#################&#125;&#123;### POST BODY ###&#125;&#123;#################&#125; 找到非 is_index 的 ，在其上添加如下代码 123&#123;% if post.include_preface %&#125; &#123;% include '../_custom/custom-post-preface.swig' %&#125;&#123;% endif %&#125; 文章末尾统一添加结束标记 创建文件 themes/next/layout/_custom/passage-end-tag.swig，并输入如下内容，或者自行修改&lt;div style=&quot;text-align: center; color: #ccc; font-size: 14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; 在主题配置文件 source/_data/next.yml 中添加如下配置，这里是关闭的，随时开启，只需要将 passage_end_tag.enable 从 false 改为 true 123# 文章结束标记（需修改主题，自己添加代码）passage_end_tag: enable: false 编辑 themes/next/layout/_macro/post.swig 文件，在下面所示的标记上面 123&#123;#####################&#125;&#123;### END POST BODY ###&#125;&#123;#####################&#125; 添加如下代码 123&#123;% if theme.passage_end_tag.enable and not is_index %&#125; &lt;div&gt;&#123;% include '../_custom/passage-end-tag.swig' %&#125;&lt;/div&gt;&#123;% endif %&#125; 添加 GitHub Banner最大的同性交友网站 GitHub 地址还是要放的，方便其他人 Follow me。找到 github_banner 项，修改以下配置 enable: true permalink: https://github.com/wdmcheng 添加搜索功能 添加依赖，在 Shell 中执行命令 1yarn add -D hexo-generator-searchdb 在站点配置文件 _config.yml 中，找到 Extensions，在后面添加 123456# 搜索功能search: path: search.xml field: post format: html limit: 10000 在主题配置文件 source/_data/next.yml 中，修改 local_search.enable 为 true 移动设备适配mobile_layout_economy: true Safari 菜单栏着色safari_rainbow: true 自定义滚动条件支持custom_scrollbar: true 添加特效 启用 Canvas-nest，在主题配置文件 source/_data/next.yml 中，修改 canvas_nest.enable 为 true 配置 CDN 加速，修改 vendors 下的配置 123vendors: canvas_nest: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js canvas_nest_nomobile: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest-nomobile.min.js 我这里还添加了 JavaScript 3D library，在主题配置文件 source/_data/next.yml 中，下面几项配置，需要启用哪种特效，就将 false 改为 true，我这里都是暂时关闭的 three_waves: false canvas_lines: false canvas_sphere: false 配置 CDN 加速，修改 vendors 下的配置 12345vendors: three: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three.min.js three_waves: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three-waves.min.js canvas_lines: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/canvas_lines.min.js canvas_sphere: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/canvas_sphere.min.js 使用 CDN 加速，安装 Canvas-Ribbon，修改主题配置文件 source/_data/next.yml，我这里没有启用，需要启用直接修改 canvas_ribbon.enable 为 true 12vendors: canvas_ribbon: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-ribbon@1/canvas-ribbon.min.js 修改动画motion.async 默认为 false，这里修改为 true，感觉动画效果快一些 添加 Live2D 动画角色 安装 hexo-helper-live2d 1yarn add -D hexo-helper-live2d 在站点配置文件 _config.yml 中，找到 Extensions，在后面添加 1234567891011121314151617181920212223242526# Live2D# https://github.com/EYHN/hexo-helper-live2dlive2d: enable: true # local，从本地加载，需要配置 pluginRootPath、pluginJsPath、pluginModelPath 三个属性；后面三种配置从网络加载，不需要配置 #scriptFrom: local 默认 #pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径) #pluginJsPath: lib/ # 脚本文件相对与插件根目录路径 #pluginModelPath: assets/ # 模型文件相对与插件根目录路径 #scriptFrom: jsdelivr # jsdelivr CDN #scriptFrom: unpkg # unpkg CDN scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js tagMode: false # 标签模式, 是否仅替换 live2d tag 标签而非插入到所有页面中 debug: false # 调试, 是否在控制台输出日志 model: # 第一种需要安装相应的包才可用；第二种和第三种需要手动放置相关文件 #use: live2d-widget-model-z16 # npm-module package name #use: miku # 博客根目录/live2d_models/ 下的目录名 #use: ./wives/wanko # 相对于博客根目录的路径 use: https://cdn.jsdelivr.net/npm/live2d-widget-model-haruto@1.x/assets/haruto.model.json # 自定义 URL，可设定 CDN display: position: right width: 300 height: 600 mobile: show: false 主页文章添加阴影效果编辑 themes/next/source/css/_custom/custom.styl 文件，添加下面代码，我这里注释掉了，取消注释可以启用阴影12345678// 主页文章添加阴影效果/*.post &#123; margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125;*/ 更新主题可以通过如下命令更新到最新的 master 分支1234cd themes/nextgit stash pullgit pullgit stash pop 加入广告我这里用的是 Google AdSense，网络问题请自行解决 访问 Google AdSense，点击 立即注册，然后填各种资料，最后生成一段代码，我的是 1234567&lt;script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"&gt;&lt;/script&gt;&lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push(&#123; google_ad_client: "ca-pub-6923016589675745", enable_page_level_ads: true &#125;);&lt;/script&gt; 编辑 themes/next/layout/_custom/head.swig 文件，粘贴代码（稍作修改，添加一些变量及控制） 123456789&#123;% if theme.google_adsense.enable %&#125; &lt;script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"&gt;&lt;/script&gt; &lt;script&gt; (adsbygoogle = window.adsbygoogle || []).push(&#123; google_ad_client: "&#123;&#123; theme.google_adsense.google_ad_client &#125;&#125;", enable_page_level_ads: true &#125;); &lt;/script&gt;&#123;% endif %&#125; 在主题配置文件 source/_data/next.yml 中添加下面代码 1234# Google AdSensegoogle_adsense: enable: true google_ad_client: ca-pub-6923016589675745 等待审核通过，好运。如果失败，可再次申请。 CDN 加速配置 font-awesome jquery velocity 的 CDN 加速，在主题配置文件 source/_data/next.yml 中，修改 vendors 下的配置12345vendors: jquery: //cdn.jsdelivr.net/npm/jquery@2/dist/jquery.min.js velocity: //cdn.jsdelivr.net/npm/velocity-animate@1/velocity.min.js velocity_ui: //cdn.jsdelivr.net/npm/velocity-animate@1/velocity.ui.min.js fontawesome: //cdn.jsdelivr.net/npm/font-awesome@4/css/font-awesome.min.css 静态资源压缩 如果未安装 gulo，在 Shell 中执行以下命令： 1npm install gulp -g 执行以下命令： 12npm install gulp -gyarn add -D gulp gulp-clean-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp-imagemin 在项目根目录下新建 gulpfile.js 文件，内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243var gulp = require('gulp');var cleancss = require('gulp-clean-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var imagemin = require('gulp-imagemin');// 压缩css文件gulp.task('clean-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(cleancss()) .pipe(gulp.dest('./public'));&#125;);// 压缩html文件gulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩js文件gulp.task('minify-js', function() &#123; return gulp.src(['./public/**/.js','!./public/js/**/*min.js']) .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public/demo 目录内图片gulp.task('minify-images', function() &#123; return gulp.src('./public/demo/**/*.*') .pipe(imagemin(&#123; optimizationLevel: 7, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest('./public/uploads'));&#125;);// 默认任务gulp.task('default', gulp.parallel('minify-html', 'clean-css', 'minify-js', 'minify-images')); 以后只需要在每次 hexo generate 后，执行一下 gulp 就可以实现对静态文件的压缩，之后再执行 hexo deploy 命令发布。写一下代码，方便复制： 123hexo generategulphexo deploy 功能增强标签插件标签插件用法参考官网 Note 标签 - Bootstrap Callout在主题配置文件 source/_data/next.yml 中，修改 note 下的配置 style: modern icons: true border_radius: 0 light_bg_offset: -3 Tabs 标签支持tabs.transition.tabs: true PDF 标签支持修改配置 pdf.enable: true Mermaid gantt 图标签支持修改配置 mermaid.enable: true 数学方程式渲染支持数学方程式渲染引擎可以使用 mathjax 或 katex，由 math.engine 项配置，将 math.enable 修改为 true 即可开启 启用 Fancybox修改配置1234fancybox: truevendors: fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css 启用书签功能12345bookmark: enable: true auto: truevendors: bookmark: //cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@1/bookmark.min.js 启用顶部阅读进度条1234reading_progress: enable: truevendors: reading_progress: //cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1/reading_progress.min.js 启用顶部加载进度条1234pace: truevendors: pace: //cdn.jsdelivr.net/npm/pace-js@1/pace.min.js pace_css: //cdn.jsdelivr.net/npm/pace-js@1/themes/blue/pace-theme-minimal.min.css 启用 FastClick123fastclick: truevendors: fastclick: https://cdn.jsdelivr.net/npm/fastclick@1/lib/fastclick.min.js 启用 Jquery Lazyload 图像延迟加载123lazyload: truevendors: lazyload: //cdn.jsdelivr.net/npm/jquery_lazyload@1/jquery.lazyload.min.js 启用 Quicklink 预加载1234quicklink: enable: truevendors: quicklink: //cdn.jsdelivr.net/npm/quicklink@1/dist/quicklink.umd.js 启用汉字标准格式支持启用方式就是直接按照下面修改主题配置文件 source/_data/next.yml，我没有启用123han: truevendors: han: //cdnjs.cloudflare.com/ajax/libs/Han/3.3.0/han.min.css 启用盘古支持——在中英文之间自动添加空格 在主题配置文件 source/_data/next.yml 中，修改 pangu: true 不使用 CDN 的话，需要安装 theme-next-pangu，我这里使用 CDN 加速，直接修改 vendors.pangu 配置12vendors: pangu: //cdn.jsdelivr.net/npm/pangu@4/dist/browser/pangu.min.js 内容分享百度分享太丑，Likely 没有本土化，不支持微信什么的，这里使用 NeedMoreShare2 不在本地加依赖了，直接使用 CDN，修改主题配置文件 source/_data/next.yml 123vendors: needmoreshare2_js: https://cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.js needmoreshare2_css: https://cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.css 修改如下配置 12345678910needmoreshare2: enable: true postbottom: enable: true options: networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook,Linkedin,Mailto,Evernote float: enable: true options: networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook,Linkedin,Mailto,Evernote 评论系统我这里使用 LiveRe，注册后安装一个免费的 City 版本，在安装代码中找到 data-uid，然后修改主题配置文件 source/_data/next.yml，打开 livere_uid 的注释，并填入 data-uid 在线聊天系统这里没有使用 NexT 官方推荐的，使用的是 DaoVoice，安装方法我参考了这里 注册之后，选择接入，编程语言为 JavaScript，会出现下面这种代码 1&lt;script&gt;(function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/XXXXXXXX.js","daovoice")&lt;/script&gt; 1234daovoice('init', &#123; app_id: "XXXXXXXX"&#125;);daovoice('update'); themes/next/layout/_custom/head.swig 文件中添加如下代码（修改一下 &lt;/script&gt; 结束标签的位置，并且将 app_id 做成变量） 123456789&#123;% if theme.daovoice.enable %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/&#123;&#123; theme.daovoice.daovoice_app_id &#125;&#125;.js","daovoice") daovoice('init', &#123; app_id: "&#123;&#123; theme.daovoice.daovoice_app_id &#125;&#125;" &#125;); daovoice('update'); &lt;/script&gt;&#123;% endif %&#125; 在主题配置文件 source/_data/next.yml 中添加下面代码，XXXXXXXX 是前面获取到的 app_id 1234# DaoVoice 在线聊天daovoice: enable: true daovoice_app_id: XXXXXXXX 部署 执行命令 yarn add -D hexo-deployer-git 部署配置，在站点配置文件 _config.yml 中，找到 deploy，在其节点下删除 type，然后添加如下配置 123- type: git repo: git@gitlab.com:wdmcheng/wdmcheng.gitlab.io.git branch: master 执行下面的命令，清理、生成静态文件、部署 1234hexo cleanhexo generategulphexo deploy 站长工具阅读量统计工具Firebase要使用 Firebase 需要梯子，不只是配置过程，用户访问时如果不能连接服务，也是没有办法统计的，因此不建议 注册或登录 Firebase，配置好项目，获取到 网络 API 密钥 和 项目 ID，然后修改主题配置文件 source/_data/next.yml 的 firestore 部分，如下 enable: true apiKey: #&lt;网络 API 密钥&gt; projectId: #&lt;项目 ID&gt; Firebase 控制台中，进入 开发 &gt; Database，创建一个非测试的数据库，之后进入规则，将 allow read, write: if false; 改为 allow read, write: if true;，然后发布 不蒜子 修改主题配置文件 source/_data/next.yml，将 busuanzi_count.enable 改为 true 这里只使用不蒜子的站点统计，文章阅读量交给 LeanCloud，因此将 busuanzi_count.post_views 改为 false 页面底部的访客数图标修改一下，busuanzi_count.total_visitors_icon 的值从 user 改为 users LeanCloudLeanCloud 的相关配置请参考Leancloud访客统计插件重大安全漏洞修复指南 到 LeanCloud 官网注册，可以直接使用 GitHub 账号注册 创建一个开发版的应用 建立一个无限制的 Counter 类，之后进入设置拿到 App ID 及 App Key 修改主题配置文件 source/_data/next.yml 中的 leancloud_visitors 部分 enable: true app_id: #&lt;App ID&gt; app_key: #&lt;App Key&gt; betterPerformance: true 在 LeanCloud 的设置页面，进入安全中心，添加Web 安全域名，注意协议、域名和端口号需严格一致，我这里是 https://www.wdmcheng.cn 部署云引擎以保证访客数量不被随意篡改 打开 LeanCloud 的云引擎 &gt; 部署，点击在线编辑 创建函数 &gt; Hook，Hook 选择 beforeUpdate，Class 选择 Counter，然后粘贴下面代码 12345678var query = new AV.Query("Counter");if (request.object.updatedKeys.indexOf('time') !== -1) &#123; return query.get(request.object.id).then(function (obj) &#123; if (obj.get("time") + 1 !== request.object.get("time")) &#123; throw new AV.Cloud.Error('Invalid update!'); &#125; &#125;)&#125; 注释处填个描述，我这里写的防止访客数量被随意篡改 然后要部署一下才可以生效 配置数据库记录只可以本地增加，禁止删除 打开站点配置文件 _config.yml，添加以下配置，app_id 与 app_key 是 LeanCloud 中的，username 与 password 是授权可以 create 的用户名与密码 123456leancloud_counter_security: enable_sync: true app_id: #&lt;App ID&gt; app_key: #&lt;App Key&gt; username: password: 执行命令 yarn add -D hexo-leancloud-counter-security 安装相关组件 执行命令 hexo lc-counter register &lt;&lt;username&gt;&gt; &lt;&lt;password&gt;&gt; 创建用户 打开 LeanCloud 的存储，进入 Counter 类，选择其他 &gt; 权限设定，将 create 的权限设置为指定用户，选择刚才创建的用户，delete 的权限也设置为指定用户，但用户和角色都留空 站点配置文件 _config.yml 的 deploy 节点下添加 - type: leancloud_counter_security_sync 配置 CDN 加速，修改 vendors.leancloud 配置12vendors: leancloud: //cdn.jsdelivr.net/npm/leancloud-storage@3/dist/av-min.js 数据分析工具Google Analytics启用 Google Analytics 启用 Google Analytics，前往Google Analytics，注册或登录，获取到 Google 跟踪 ID 修改主题配置文件 source/_data/next.yml，将 google_analytics 部分的注释打开，并且在 google_analytics.tracking_id 填入 UA-XXXXXXXX-X 形式的 Google 跟踪 ID 关联 Google Search Console若要关联 Google Search Console，这里不能使用 HTML 文件 方式验证，因为使用 Hexo 部署时，会自动移除多余的 html 文件。这里采用 Google Analytics 方式验证，那么在启用了 Google Analytics 后必须部署，然后根据 Google 的向导操作 关联 Google AdSense直接在 Google Analytics 的管理页面关联就可以了 百度统计 打开百度统计，注册、建立网站，完成后会有一个下面这种的统计代码，复制 https://hm.baidu.com/hm.js?xxxxxxxx 中的 xxxxxxxx，得到统计 ID 123456789&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement("script"); hm.src = "https://hm.baidu.com/hm.js?xxxxxxxx"; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt; 打开主题配置文件 source/_data/next.yml，找到 baidu_analytics，打开注释，并修改为 baidu_analytics: xxxxxxxx 搜索引擎相关搜索引擎优化（SEO） 在主题配置文件 source/_data/next.yml 中，修改如下配置 disable_baidu_transformation: true seo: true index_with_subtitle: true exturl: true baidu_push: true 各种 Webmaster tools verification 需要到各自官网获取，然后填写到配置文件中，详细说明可参考NexT 主题官网，我这里开了 google_site_verification bing_site_verification baidu_site_verification 三个，可以开三个页签分别配置到待验证的环节，然后配好 NexT，一次发布，再分别点验证 减少出站链接能够有效防止权重分散，这里安装 hexo-autonofollow，该工具可以在出站链接上自动添加属性 external nofollow noopener noreferrer 1yarn add -D hexo-autonofollow 在站点配置文件 _config.yml 中添加如下配置，友链不想添加 nofollow 属性的，添加到 exclude 里 12345nofollow: enable: true exclude: - 友链地址1 - 友链地址2 主题配置文件中默认的 permalink 是 :year/:month/:day/:title/，这对搜索引擎不友好，直接修改一下链接层级，变成 :title 或者 :year-:month-:day-:title 搜索引擎抓取这里参考 Hexo博客Next主题SEO优化方法 首先安装插件，自动生成 sitemap 文件，一个传统的，一个百度的 1yarn add -D hexo-generator-sitemap hexo-generator-baidu-sitemap 安装完部署，这时网站就有了两个 sitemap 了 前面已经在 Google Search Console 和百度搜索资源平台中添加验证了站点，现在可以直接提交 sitemap.xml 了，百度提交 baidusitemap.xml github 禁止百度爬虫，好在百度支持主动推送，因此还需要添加一个主动推送的插件，执行命令 yarn add -D hexo-baidu-url-submit 在站点配置文件 _config.yml 中，参考下面配置、注释及主动推送的接口调用地址添加配置（最后三个是熊掌号相关的，没有注册熊掌号则不写） 12345678baidu_url_submit: count: 1000 ## 提交最新的一个链接 host: alili.tech ## 在百度站长平台中注册的域名 token: xxxxx ## 请注意这是您的秘钥，所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址，新链接会保存在此文本文档里 xz_appid: 'xxxxxx' ## 你的熊掌号 appid xz_token: 'xxxxxx' ## 你的熊掌号 token xz_count: 10 ## 从所有的提交的数据当中选取最新的10条，该数量跟你的熊掌号而定 在 deploy 下增加下面的类型（没注册熊掌号则不添加熊掌号的类型） 12- type: baidu_url_submitter # 百度- type: baidu_xz_url_submitter # 百度熊掌号 添加热度排行榜这里参考了 hexo next 新增阅读排行页面 排行榜源码如下（修改了文章链接地址），其中 leancloud_uri leancloud_appid leancloud_appkey 需要替换一下 123456789101112131415161718192021222324&lt;div id="top"&gt;&lt;/div&gt;&lt;script src="leancloud_uri"&gt;&lt;/script&gt;&lt;script&gt;AV.initialize("leancloud_appid", "leancloud_appkey");&lt;/script&gt;&lt;script type="text/javascript"&gt;let time = 0let title = ""let url = ""let query = new AV.Query('Counter');query.notEqualTo('id', 0);query.descending('time');query.limit(1000);query.find().then(function (todo) &#123; for (let i = 0; i &lt; 1000; i++)&#123; const result = todo[i].attributes; time = result.time; title = result.title; url = result.url; const content="&lt;p&gt;&lt;font color='#1C1C1C'&gt;【文章热度:"+time+"℃】&lt;/font&gt;&lt;a href='"+url+"'&gt;"+title+"&lt;/a&gt;&lt;/p&gt;"; document.getElementById("top").innerHTML += content &#125;&#125;, function (error) &#123; console.log("error");&#125;);&lt;/script&gt; 执行 hexo new page top 命令，创建一个 top 页面，编辑该页面，在头部描述区域添加 comments: false 关闭评论功能，然后粘贴上述代码 修改主题配置文件 source/_data/next.yml，在 menu 下添加 top: /top/ || signal 编辑 themes/next/languages/zh-CN.yml 语言文件，在 menu 下添加 top: /top/ || signal 自动化部署我这里是使用 GitLab 私有仓库保存源码（因为含有密钥等信息），使用 gitlab-ci 自动部署的到 GitLab 的仓库，然后使用 GitLab 的镜像仓库功能推送到 github 与 coding，这样每次写完文章，合并到 master 分支即可 使用 GitHub 的 Pages 服务并配置域名，需要添加 CNAME 文件，为了自动部署，直接新建 source/CNAME 文件，并在里面填写 www.wdmcheng.cn 如果要使用 HTTPS，要先解析到 Coding 的服务，然后开启 Coding Pages 的 HTTPS 功能，待申请下来证书后，再添加国外 IP 解析到 GitHub，最后再申请 GitHub Pages 的 HTTPS 三个月证书到期需要续期时，需要先暂停国外 IP 解析，Coding 续期完成再开启 自动化部署的工作流配置，参考 GitLab Pages examples 和 NexT 主题官网，我这里采用的是 SSH 方式部署的，附上我的 .gitlab-ci.yml 文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748# This file is a template, and might need editing before it works on your project.# Full project: https://gitlab.com/pages/hexoimage: node:10.15.3before_script:- export TZ='Asia/Shanghai'- git config --global user.name "wdmcheng"- git config --global user.email "idea_2008@126.com"# Restore last modified time- "git ls-files -z | while read -d '' path; do touch -d \"$(git log -1 --format=\"@%ct\" \"$path\")\" \"$path\"; done"# Install ssh-agent if not already installed, it is required by Docker.# (change apt-get to yum if you use a CentOS-based image)- 'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )'# Run ssh-agent (inside the build environment)- eval $(ssh-agent -s)# Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store- ssh-add &lt;(echo "$DEPLOY_PRIVATE_KEY")# For Docker builds disable host key checking. Be aware that by adding that# you are suspectible to man-in-the-middle attacks.# WARNING: Use this only with the Docker executor, if you use it with shell# you will overwrite your user's SSH config.- mkdir -p ~/.ssh- '[[ -f /.dockerenv ]] &amp;&amp; echo -e "Host *\n\tStrictHostKeyChecking no\n\n" &gt; ~/.ssh/config'# In order to properly check the server's host key, assuming you created the# SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines# instead.# - mkdir -p ~/.ssh# - '[[ -f /.dockerenv ]] &amp;&amp; echo "$SSH_SERVER_HOSTKEYS" &gt; ~/.ssh/known_hosts'- apt-get update -qq &amp;&amp; apt-get install -y -qq pandoccache: paths: - node_modules/ - .deploy_git/ - source/leancloud.memopages: script: - npm install hexo-cli yarn gulp@^4.0.0 -g - test -e package.json &amp;&amp; yarn install - hexo clean &amp;&amp; hexo generate - gulp - hexo deploy artifacts: paths: - public only: - master 致谢 遇见西门的博文【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析 my_杨哥的简书文章Hexo的Next主题详细配置 LEAFERx 的博文 Leancloud访客统计插件重大安全漏洞修复指南 hoxis 的博文 hexo next 配置 DaoVoice 实现在线聊天功能及 hexo next 新增阅读排行页面]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
</search>
